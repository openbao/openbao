// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: builtin/logical/pki/cert_template.proto

package pki

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KeyUsage int32

const (
	KeyUsage_KeyUsageUnspecified       KeyUsage = 0
	KeyUsage_KeyUsageDigitalSignature  KeyUsage = 1
	KeyUsage_KeyUsageContentCommitment KeyUsage = 2
	KeyUsage_KeyUsageKeyEncipherment   KeyUsage = 3
	KeyUsage_KeyUsageDataEncipherment  KeyUsage = 4
	KeyUsage_KeyUsageKeyAgreement      KeyUsage = 5
	KeyUsage_KeyUsageCertSign          KeyUsage = 6
	KeyUsage_KeyUsageCRLSign           KeyUsage = 7
	KeyUsage_KeyUsageEncipherOnly      KeyUsage = 8
	KeyUsage_KeyUsageDecipherOnly      KeyUsage = 9
)

// Enum value maps for KeyUsage.
var (
	KeyUsage_name = map[int32]string{
		0: "KeyUsageUnspecified",
		1: "KeyUsageDigitalSignature",
		2: "KeyUsageContentCommitment",
		3: "KeyUsageKeyEncipherment",
		4: "KeyUsageDataEncipherment",
		5: "KeyUsageKeyAgreement",
		6: "KeyUsageCertSign",
		7: "KeyUsageCRLSign",
		8: "KeyUsageEncipherOnly",
		9: "KeyUsageDecipherOnly",
	}
	KeyUsage_value = map[string]int32{
		"KeyUsageUnspecified":       0,
		"KeyUsageDigitalSignature":  1,
		"KeyUsageContentCommitment": 2,
		"KeyUsageKeyEncipherment":   3,
		"KeyUsageDataEncipherment":  4,
		"KeyUsageKeyAgreement":      5,
		"KeyUsageCertSign":          6,
		"KeyUsageCRLSign":           7,
		"KeyUsageEncipherOnly":      8,
		"KeyUsageDecipherOnly":      9,
	}
)

func (x KeyUsage) Enum() *KeyUsage {
	p := new(KeyUsage)
	*p = x
	return p
}

func (x KeyUsage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyUsage) Descriptor() protoreflect.EnumDescriptor {
	return file_builtin_logical_pki_cert_template_proto_enumTypes[0].Descriptor()
}

func (KeyUsage) Type() protoreflect.EnumType {
	return &file_builtin_logical_pki_cert_template_proto_enumTypes[0]
}

func (x KeyUsage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyUsage.Descriptor instead.
func (KeyUsage) EnumDescriptor() ([]byte, []int) {
	return file_builtin_logical_pki_cert_template_proto_rawDescGZIP(), []int{0}
}

type ExtKeyUsage int32

const (
	ExtKeyUsage_ExtKeyUsageAny                            ExtKeyUsage = 0
	ExtKeyUsage_ExtKeyUsageServerAuth                     ExtKeyUsage = 1
	ExtKeyUsage_ExtKeyUsageClientAuth                     ExtKeyUsage = 2
	ExtKeyUsage_ExtKeyUsageCodeSigning                    ExtKeyUsage = 3
	ExtKeyUsage_ExtKeyUsageEmailProtection                ExtKeyUsage = 4
	ExtKeyUsage_ExtKeyUsageIPSECEndSystem                 ExtKeyUsage = 5
	ExtKeyUsage_ExtKeyUsageIPSECTunnel                    ExtKeyUsage = 6
	ExtKeyUsage_ExtKeyUsageIPSECUser                      ExtKeyUsage = 7
	ExtKeyUsage_ExtKeyUsageTimeStamping                   ExtKeyUsage = 8
	ExtKeyUsage_ExtKeyUsageOCSPSigning                    ExtKeyUsage = 9
	ExtKeyUsage_ExtKeyUsageMicrosoftServerGatedCrypto     ExtKeyUsage = 10
	ExtKeyUsage_ExtKeyUsageNetscapeServerGatedCrypto      ExtKeyUsage = 11
	ExtKeyUsage_ExtKeyUsageMicrosoftCommercialCodeSigning ExtKeyUsage = 12
	ExtKeyUsage_ExtKeyUsageMicrosoftKernelCodeSigning     ExtKeyUsage = 13
)

// Enum value maps for ExtKeyUsage.
var (
	ExtKeyUsage_name = map[int32]string{
		0:  "ExtKeyUsageAny",
		1:  "ExtKeyUsageServerAuth",
		2:  "ExtKeyUsageClientAuth",
		3:  "ExtKeyUsageCodeSigning",
		4:  "ExtKeyUsageEmailProtection",
		5:  "ExtKeyUsageIPSECEndSystem",
		6:  "ExtKeyUsageIPSECTunnel",
		7:  "ExtKeyUsageIPSECUser",
		8:  "ExtKeyUsageTimeStamping",
		9:  "ExtKeyUsageOCSPSigning",
		10: "ExtKeyUsageMicrosoftServerGatedCrypto",
		11: "ExtKeyUsageNetscapeServerGatedCrypto",
		12: "ExtKeyUsageMicrosoftCommercialCodeSigning",
		13: "ExtKeyUsageMicrosoftKernelCodeSigning",
	}
	ExtKeyUsage_value = map[string]int32{
		"ExtKeyUsageAny":                            0,
		"ExtKeyUsageServerAuth":                     1,
		"ExtKeyUsageClientAuth":                     2,
		"ExtKeyUsageCodeSigning":                    3,
		"ExtKeyUsageEmailProtection":                4,
		"ExtKeyUsageIPSECEndSystem":                 5,
		"ExtKeyUsageIPSECTunnel":                    6,
		"ExtKeyUsageIPSECUser":                      7,
		"ExtKeyUsageTimeStamping":                   8,
		"ExtKeyUsageOCSPSigning":                    9,
		"ExtKeyUsageMicrosoftServerGatedCrypto":     10,
		"ExtKeyUsageNetscapeServerGatedCrypto":      11,
		"ExtKeyUsageMicrosoftCommercialCodeSigning": 12,
		"ExtKeyUsageMicrosoftKernelCodeSigning":     13,
	}
)

func (x ExtKeyUsage) Enum() *ExtKeyUsage {
	p := new(ExtKeyUsage)
	*p = x
	return p
}

func (x ExtKeyUsage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtKeyUsage) Descriptor() protoreflect.EnumDescriptor {
	return file_builtin_logical_pki_cert_template_proto_enumTypes[1].Descriptor()
}

func (ExtKeyUsage) Type() protoreflect.EnumType {
	return &file_builtin_logical_pki_cert_template_proto_enumTypes[1]
}

func (x ExtKeyUsage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtKeyUsage.Descriptor instead.
func (ExtKeyUsage) EnumDescriptor() ([]byte, []int) {
	return file_builtin_logical_pki_cert_template_proto_rawDescGZIP(), []int{1}
}

type PKIX struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PKIX) Reset() {
	*x = PKIX{}
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PKIX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKIX) ProtoMessage() {}

func (x *PKIX) ProtoReflect() protoreflect.Message {
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKIX.ProtoReflect.Descriptor instead.
func (*PKIX) Descriptor() ([]byte, []int) {
	return file_builtin_logical_pki_cert_template_proto_rawDescGZIP(), []int{0}
}

type ObjectIdentifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 1.2.840.113549 → [1, 2, 840, 113549]
	Arc           []uint32 `protobuf:"varint,1,rep,packed,name=arc,proto3" json:"arc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObjectIdentifier) Reset() {
	*x = ObjectIdentifier{}
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectIdentifier) ProtoMessage() {}

func (x *ObjectIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectIdentifier.ProtoReflect.Descriptor instead.
func (*ObjectIdentifier) Descriptor() ([]byte, []int) {
	return file_builtin_logical_pki_cert_template_proto_rawDescGZIP(), []int{1}
}

func (x *ObjectIdentifier) GetArc() []uint32 {
	if x != nil {
		return x.Arc
	}
	return nil
}

type Net struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Net) Reset() {
	*x = Net{}
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Net) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net) ProtoMessage() {}

func (x *Net) ProtoReflect() protoreflect.Message {
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net.ProtoReflect.Descriptor instead.
func (*Net) Descriptor() ([]byte, []int) {
	return file_builtin_logical_pki_cert_template_proto_rawDescGZIP(), []int{2}
}

type Userinfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`                           // RFC‑2396 allows empty.
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`                           // Empty when not supplied.
	PasswordSet   bool                   `protobuf:"varint,3,opt,name=password_set,json=passwordSet,proto3" json:"password_set,omitempty"` // If true, then password field is meaningful.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Userinfo) Reset() {
	*x = Userinfo{}
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Userinfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Userinfo) ProtoMessage() {}

func (x *Userinfo) ProtoReflect() protoreflect.Message {
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Userinfo.ProtoReflect.Descriptor instead.
func (*Userinfo) Descriptor() ([]byte, []int) {
	return file_builtin_logical_pki_cert_template_proto_rawDescGZIP(), []int{3}
}

func (x *Userinfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Userinfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Userinfo) GetPasswordSet() bool {
	if x != nil {
		return x.PasswordSet
	}
	return false
}

type Url struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Url) Reset() {
	*x = Url{}
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Url) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Url) ProtoMessage() {}

func (x *Url) ProtoReflect() protoreflect.Message {
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Url.ProtoReflect.Descriptor instead.
func (*Url) Descriptor() ([]byte, []int) {
	return file_builtin_logical_pki_cert_template_proto_rawDescGZIP(), []int{4}
}

// An OID represents an ASN.1 OBJECT IDENTIFIER.
type OID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Arc           []uint64               `protobuf:"varint,1,rep,packed,name=arc,proto3" json:"arc,omitempty"` // 1.2.840.113549 → [1, 2, 840, 113549]
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OID) Reset() {
	*x = OID{}
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OID) ProtoMessage() {}

func (x *OID) ProtoReflect() protoreflect.Message {
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OID.ProtoReflect.Descriptor instead.
func (*OID) Descriptor() ([]byte, []int) {
	return file_builtin_logical_pki_cert_template_proto_rawDescGZIP(), []int{5}
}

func (x *OID) GetArc() []uint64 {
	if x != nil {
		return x.Arc
	}
	return nil
}

type PolicyMapping struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	IssuerDomainPolicy  *OID                   `protobuf:"bytes,1,opt,name=IssuerDomainPolicy,proto3" json:"IssuerDomainPolicy,omitempty"`
	SubjectDomainPolicy *OID                   `protobuf:"bytes,2,opt,name=SubjectDomainPolicy,proto3" json:"SubjectDomainPolicy,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PolicyMapping) Reset() {
	*x = PolicyMapping{}
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PolicyMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyMapping) ProtoMessage() {}

func (x *PolicyMapping) ProtoReflect() protoreflect.Message {
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyMapping.ProtoReflect.Descriptor instead.
func (*PolicyMapping) Descriptor() ([]byte, []int) {
	return file_builtin_logical_pki_cert_template_proto_rawDescGZIP(), []int{6}
}

func (x *PolicyMapping) GetIssuerDomainPolicy() *OID {
	if x != nil {
		return x.IssuerDomainPolicy
	}
	return nil
}

func (x *PolicyMapping) GetSubjectDomainPolicy() *OID {
	if x != nil {
		return x.SubjectDomainPolicy
	}
	return nil
}

type ValidationOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Template      *CertTemplate          `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	IssuerRef     string                 `protobuf:"bytes,2,opt,name=issuer_ref,json=issuerRef,proto3" json:"issuer_ref,omitempty"`
	UsePss        bool                   `protobuf:"varint,3,opt,name=use_pss,json=usePss,proto3" json:"use_pss,omitempty"`
	SignatureBits uint32                 `protobuf:"varint,4,opt,name=signature_bits,json=signatureBits,proto3" json:"signature_bits,omitempty"`
	GenerateLease bool                   `protobuf:"varint,5,opt,name=generate_lease,json=generateLease,proto3" json:"generate_lease,omitempty"`
	NoStore       bool                   `protobuf:"varint,6,opt,name=no_store,json=noStore,proto3" json:"no_store,omitempty"`
	// Warnings about the request or adjustments made by the CEL policy engine.
	// E.g., "common_name was empty so added example.com"
	Warnings []string `protobuf:"bytes,7,rep,name=warnings,proto3" json:"warnings,omitempty"`
	// For CSR:
	SubjectKeyId []byte `protobuf:"bytes,8,opt,name=subject_key_id,json=subjectKeyId,proto3" json:"subject_key_id,omitempty"` // This value is auto-computed by certutil for generated keys.
	// For key generation/"issue"
	KeyType       string `protobuf:"bytes,9,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	KeyBits       uint64 `protobuf:"varint,10,opt,name=key_bits,json=keyBits,proto3" json:"key_bits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidationOutput) Reset() {
	*x = ValidationOutput{}
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidationOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationOutput) ProtoMessage() {}

func (x *ValidationOutput) ProtoReflect() protoreflect.Message {
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationOutput.ProtoReflect.Descriptor instead.
func (*ValidationOutput) Descriptor() ([]byte, []int) {
	return file_builtin_logical_pki_cert_template_proto_rawDescGZIP(), []int{7}
}

func (x *ValidationOutput) GetTemplate() *CertTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *ValidationOutput) GetIssuerRef() string {
	if x != nil {
		return x.IssuerRef
	}
	return ""
}

func (x *ValidationOutput) GetUsePss() bool {
	if x != nil {
		return x.UsePss
	}
	return false
}

func (x *ValidationOutput) GetSignatureBits() uint32 {
	if x != nil {
		return x.SignatureBits
	}
	return 0
}

func (x *ValidationOutput) GetGenerateLease() bool {
	if x != nil {
		return x.GenerateLease
	}
	return false
}

func (x *ValidationOutput) GetNoStore() bool {
	if x != nil {
		return x.NoStore
	}
	return false
}

func (x *ValidationOutput) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *ValidationOutput) GetSubjectKeyId() []byte {
	if x != nil {
		return x.SubjectKeyId
	}
	return nil
}

func (x *ValidationOutput) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

func (x *ValidationOutput) GetKeyBits() uint64 {
	if x != nil {
		return x.KeyBits
	}
	return 0
}

// Mirrors x509.Certificate
type CertTemplate struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Version               int64                  `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	Subject               *PKIX_Name             `protobuf:"bytes,2,opt,name=Subject,proto3" json:"Subject,omitempty"`
	NotBefore             *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=NotBefore,proto3" json:"NotBefore,omitempty"`
	NotAfter              *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=NotAfter,proto3" json:"NotAfter,omitempty"`
	KeyUsage              KeyUsage               `protobuf:"varint,5,opt,name=KeyUsage,proto3,enum=openbao.pki.KeyUsage" json:"KeyUsage,omitempty"`
	ExtraExtensions       []*PKIX_Extension      `protobuf:"bytes,6,rep,name=ExtraExtensions,proto3" json:"ExtraExtensions,omitempty"`
	ExtKeyUsage           []ExtKeyUsage          `protobuf:"varint,7,rep,packed,name=ExtKeyUsage,proto3,enum=openbao.pki.ExtKeyUsage" json:"ExtKeyUsage,omitempty"`
	UnknownExtKeyUsage    []*ObjectIdentifier    `protobuf:"bytes,8,rep,name=UnknownExtKeyUsage,proto3" json:"UnknownExtKeyUsage,omitempty"`
	BasicConstraintsValid bool                   `protobuf:"varint,9,opt,name=BasicConstraintsValid,proto3" json:"BasicConstraintsValid,omitempty"`
	IsCA                  bool                   `protobuf:"varint,10,opt,name=IsCA,proto3" json:"IsCA,omitempty"`
	MaxPathLen            int64                  `protobuf:"varint,11,opt,name=MaxPathLen,proto3" json:"MaxPathLen,omitempty"`
	MaxPathLenZero        bool                   `protobuf:"varint,12,opt,name=MaxPathLenZero,proto3" json:"MaxPathLenZero,omitempty"`
	SubjectKeyId          []byte                 `protobuf:"bytes,13,opt,name=SubjectKeyId,proto3" json:"SubjectKeyId,omitempty"`
	DNSNames              []string               `protobuf:"bytes,14,rep,name=DNSNames,proto3" json:"DNSNames,omitempty"`
	EmailAddresses        []string               `protobuf:"bytes,15,rep,name=EmailAddresses,proto3" json:"EmailAddresses,omitempty"`
	IPAddresses           []*Net_IP              `protobuf:"bytes,16,rep,name=IPAddresses,proto3" json:"IPAddresses,omitempty"`
	URIs                  []*Url_URL             `protobuf:"bytes,17,rep,name=URIs,proto3" json:"URIs,omitempty"`
	// Name constraints
	PermittedDNSDomainsCritical bool                `protobuf:"varint,18,opt,name=PermittedDNSDomainsCritical,proto3" json:"PermittedDNSDomainsCritical,omitempty"` // if true then the name constraints are marked critical.
	PermittedDNSDomains         []string            `protobuf:"bytes,19,rep,name=PermittedDNSDomains,proto3" json:"PermittedDNSDomains,omitempty"`
	ExcludedDNSDomains          []string            `protobuf:"bytes,20,rep,name=ExcludedDNSDomains,proto3" json:"ExcludedDNSDomains,omitempty"`
	PermittedIPRanges           []*Net_IPNet        `protobuf:"bytes,21,rep,name=PermittedIPRanges,proto3" json:"PermittedIPRanges,omitempty"`
	ExcludedIPRanges            []*Net_IPNet        `protobuf:"bytes,22,rep,name=ExcludedIPRanges,proto3" json:"ExcludedIPRanges,omitempty"`
	PermittedEmailAddresses     []string            `protobuf:"bytes,23,rep,name=PermittedEmailAddresses,proto3" json:"PermittedEmailAddresses,omitempty"`
	ExcludedEmailAddresses      []string            `protobuf:"bytes,24,rep,name=ExcludedEmailAddresses,proto3" json:"ExcludedEmailAddresses,omitempty"`
	PermittedURIDomains         []string            `protobuf:"bytes,25,rep,name=PermittedURIDomains,proto3" json:"PermittedURIDomains,omitempty"`
	ExcludedURIDomains          []string            `protobuf:"bytes,26,rep,name=ExcludedURIDomains,proto3" json:"ExcludedURIDomains,omitempty"`
	PolicyIdentifiers           []*ObjectIdentifier `protobuf:"bytes,27,rep,name=PolicyIdentifiers,proto3" json:"PolicyIdentifiers,omitempty"`
	Policies                    []*OID              `protobuf:"bytes,28,rep,name=Policies,proto3" json:"Policies,omitempty"`
	InhibitAnyPolicy            int64               `protobuf:"varint,29,opt,name=InhibitAnyPolicy,proto3" json:"InhibitAnyPolicy,omitempty"`
	InhibitAnyPolicyZero        bool                `protobuf:"varint,30,opt,name=InhibitAnyPolicyZero,proto3" json:"InhibitAnyPolicyZero,omitempty"`
	InhibitPolicyMapping        int64               `protobuf:"varint,31,opt,name=InhibitPolicyMapping,proto3" json:"InhibitPolicyMapping,omitempty"`
	InhibitPolicyMappingZero    bool                `protobuf:"varint,32,opt,name=InhibitPolicyMappingZero,proto3" json:"InhibitPolicyMappingZero,omitempty"`
	RequireExplicitPolicy       int64               `protobuf:"varint,33,opt,name=RequireExplicitPolicy,proto3" json:"RequireExplicitPolicy,omitempty"`
	RequireExplicitPolicyZero   bool                `protobuf:"varint,34,opt,name=RequireExplicitPolicyZero,proto3" json:"RequireExplicitPolicyZero,omitempty"`
	PolicyMappings              []*PolicyMapping    `protobuf:"bytes,35,rep,name=PolicyMappings,proto3" json:"PolicyMappings,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *CertTemplate) Reset() {
	*x = CertTemplate{}
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertTemplate) ProtoMessage() {}

func (x *CertTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertTemplate.ProtoReflect.Descriptor instead.
func (*CertTemplate) Descriptor() ([]byte, []int) {
	return file_builtin_logical_pki_cert_template_proto_rawDescGZIP(), []int{8}
}

func (x *CertTemplate) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CertTemplate) GetSubject() *PKIX_Name {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *CertTemplate) GetNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

func (x *CertTemplate) GetNotAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.NotAfter
	}
	return nil
}

func (x *CertTemplate) GetKeyUsage() KeyUsage {
	if x != nil {
		return x.KeyUsage
	}
	return KeyUsage_KeyUsageUnspecified
}

func (x *CertTemplate) GetExtraExtensions() []*PKIX_Extension {
	if x != nil {
		return x.ExtraExtensions
	}
	return nil
}

func (x *CertTemplate) GetExtKeyUsage() []ExtKeyUsage {
	if x != nil {
		return x.ExtKeyUsage
	}
	return nil
}

func (x *CertTemplate) GetUnknownExtKeyUsage() []*ObjectIdentifier {
	if x != nil {
		return x.UnknownExtKeyUsage
	}
	return nil
}

func (x *CertTemplate) GetBasicConstraintsValid() bool {
	if x != nil {
		return x.BasicConstraintsValid
	}
	return false
}

func (x *CertTemplate) GetIsCA() bool {
	if x != nil {
		return x.IsCA
	}
	return false
}

func (x *CertTemplate) GetMaxPathLen() int64 {
	if x != nil {
		return x.MaxPathLen
	}
	return 0
}

func (x *CertTemplate) GetMaxPathLenZero() bool {
	if x != nil {
		return x.MaxPathLenZero
	}
	return false
}

func (x *CertTemplate) GetSubjectKeyId() []byte {
	if x != nil {
		return x.SubjectKeyId
	}
	return nil
}

func (x *CertTemplate) GetDNSNames() []string {
	if x != nil {
		return x.DNSNames
	}
	return nil
}

func (x *CertTemplate) GetEmailAddresses() []string {
	if x != nil {
		return x.EmailAddresses
	}
	return nil
}

func (x *CertTemplate) GetIPAddresses() []*Net_IP {
	if x != nil {
		return x.IPAddresses
	}
	return nil
}

func (x *CertTemplate) GetURIs() []*Url_URL {
	if x != nil {
		return x.URIs
	}
	return nil
}

func (x *CertTemplate) GetPermittedDNSDomainsCritical() bool {
	if x != nil {
		return x.PermittedDNSDomainsCritical
	}
	return false
}

func (x *CertTemplate) GetPermittedDNSDomains() []string {
	if x != nil {
		return x.PermittedDNSDomains
	}
	return nil
}

func (x *CertTemplate) GetExcludedDNSDomains() []string {
	if x != nil {
		return x.ExcludedDNSDomains
	}
	return nil
}

func (x *CertTemplate) GetPermittedIPRanges() []*Net_IPNet {
	if x != nil {
		return x.PermittedIPRanges
	}
	return nil
}

func (x *CertTemplate) GetExcludedIPRanges() []*Net_IPNet {
	if x != nil {
		return x.ExcludedIPRanges
	}
	return nil
}

func (x *CertTemplate) GetPermittedEmailAddresses() []string {
	if x != nil {
		return x.PermittedEmailAddresses
	}
	return nil
}

func (x *CertTemplate) GetExcludedEmailAddresses() []string {
	if x != nil {
		return x.ExcludedEmailAddresses
	}
	return nil
}

func (x *CertTemplate) GetPermittedURIDomains() []string {
	if x != nil {
		return x.PermittedURIDomains
	}
	return nil
}

func (x *CertTemplate) GetExcludedURIDomains() []string {
	if x != nil {
		return x.ExcludedURIDomains
	}
	return nil
}

func (x *CertTemplate) GetPolicyIdentifiers() []*ObjectIdentifier {
	if x != nil {
		return x.PolicyIdentifiers
	}
	return nil
}

func (x *CertTemplate) GetPolicies() []*OID {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *CertTemplate) GetInhibitAnyPolicy() int64 {
	if x != nil {
		return x.InhibitAnyPolicy
	}
	return 0
}

func (x *CertTemplate) GetInhibitAnyPolicyZero() bool {
	if x != nil {
		return x.InhibitAnyPolicyZero
	}
	return false
}

func (x *CertTemplate) GetInhibitPolicyMapping() int64 {
	if x != nil {
		return x.InhibitPolicyMapping
	}
	return 0
}

func (x *CertTemplate) GetInhibitPolicyMappingZero() bool {
	if x != nil {
		return x.InhibitPolicyMappingZero
	}
	return false
}

func (x *CertTemplate) GetRequireExplicitPolicy() int64 {
	if x != nil {
		return x.RequireExplicitPolicy
	}
	return 0
}

func (x *CertTemplate) GetRequireExplicitPolicyZero() bool {
	if x != nil {
		return x.RequireExplicitPolicyZero
	}
	return false
}

func (x *CertTemplate) GetPolicyMappings() []*PolicyMapping {
	if x != nil {
		return x.PolicyMappings
	}
	return nil
}

type PKIX_Name struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Country          []string               `protobuf:"bytes,1,rep,name=Country,proto3" json:"Country,omitempty"`
	Organization     []string               `protobuf:"bytes,2,rep,name=Organization,proto3" json:"Organization,omitempty"`
	OrganizationUnit []string               `protobuf:"bytes,3,rep,name=OrganizationUnit,proto3" json:"OrganizationUnit,omitempty"`
	Locality         []string               `protobuf:"bytes,4,rep,name=Locality,proto3" json:"Locality,omitempty"`
	Province         []string               `protobuf:"bytes,5,rep,name=Province,proto3" json:"Province,omitempty"`
	StreetAddress    []string               `protobuf:"bytes,6,rep,name=StreetAddress,proto3" json:"StreetAddress,omitempty"`
	PostalCode       []string               `protobuf:"bytes,7,rep,name=PostalCode,proto3" json:"PostalCode,omitempty"`
	SerialNumber     string                 `protobuf:"bytes,8,opt,name=SerialNumber,proto3" json:"SerialNumber,omitempty"`
	CommonName       string                 `protobuf:"bytes,9,opt,name=CommonName,proto3" json:"CommonName,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PKIX_Name) Reset() {
	*x = PKIX_Name{}
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PKIX_Name) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKIX_Name) ProtoMessage() {}

func (x *PKIX_Name) ProtoReflect() protoreflect.Message {
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKIX_Name.ProtoReflect.Descriptor instead.
func (*PKIX_Name) Descriptor() ([]byte, []int) {
	return file_builtin_logical_pki_cert_template_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PKIX_Name) GetCountry() []string {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *PKIX_Name) GetOrganization() []string {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *PKIX_Name) GetOrganizationUnit() []string {
	if x != nil {
		return x.OrganizationUnit
	}
	return nil
}

func (x *PKIX_Name) GetLocality() []string {
	if x != nil {
		return x.Locality
	}
	return nil
}

func (x *PKIX_Name) GetProvince() []string {
	if x != nil {
		return x.Province
	}
	return nil
}

func (x *PKIX_Name) GetStreetAddress() []string {
	if x != nil {
		return x.StreetAddress
	}
	return nil
}

func (x *PKIX_Name) GetPostalCode() []string {
	if x != nil {
		return x.PostalCode
	}
	return nil
}

func (x *PKIX_Name) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *PKIX_Name) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

type PKIX_Extension struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []int64                `protobuf:"varint,1,rep,packed,name=Id,proto3" json:"Id,omitempty"`
	Critical      bool                   `protobuf:"varint,2,opt,name=Critical,proto3" json:"Critical,omitempty"`
	Value         []byte                 `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PKIX_Extension) Reset() {
	*x = PKIX_Extension{}
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PKIX_Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PKIX_Extension) ProtoMessage() {}

func (x *PKIX_Extension) ProtoReflect() protoreflect.Message {
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PKIX_Extension.ProtoReflect.Descriptor instead.
func (*PKIX_Extension) Descriptor() ([]byte, []int) {
	return file_builtin_logical_pki_cert_template_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PKIX_Extension) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PKIX_Extension) GetCritical() bool {
	if x != nil {
		return x.Critical
	}
	return false
}

func (x *PKIX_Extension) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type Net_IP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IP            []byte                 `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Net_IP) Reset() {
	*x = Net_IP{}
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Net_IP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_IP) ProtoMessage() {}

func (x *Net_IP) ProtoReflect() protoreflect.Message {
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_IP.ProtoReflect.Descriptor instead.
func (*Net_IP) Descriptor() ([]byte, []int) {
	return file_builtin_logical_pki_cert_template_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Net_IP) GetIP() []byte {
	if x != nil {
		return x.IP
	}
	return nil
}

type Net_IPNet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IP            *Net_IP                `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"` // network number
	Mask          *Net_IPMask            `protobuf:"bytes,2,opt,name=Mask,proto3" json:"Mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Net_IPNet) Reset() {
	*x = Net_IPNet{}
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Net_IPNet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_IPNet) ProtoMessage() {}

func (x *Net_IPNet) ProtoReflect() protoreflect.Message {
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_IPNet.ProtoReflect.Descriptor instead.
func (*Net_IPNet) Descriptor() ([]byte, []int) {
	return file_builtin_logical_pki_cert_template_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Net_IPNet) GetIP() *Net_IP {
	if x != nil {
		return x.IP
	}
	return nil
}

func (x *Net_IPNet) GetMask() *Net_IPMask {
	if x != nil {
		return x.Mask
	}
	return nil
}

type Net_IPMask struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IPMask        []byte                 `protobuf:"bytes,1,opt,name=IPMask,proto3" json:"IPMask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Net_IPMask) Reset() {
	*x = Net_IPMask{}
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Net_IPMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Net_IPMask) ProtoMessage() {}

func (x *Net_IPMask) ProtoReflect() protoreflect.Message {
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Net_IPMask.ProtoReflect.Descriptor instead.
func (*Net_IPMask) Descriptor() ([]byte, []int) {
	return file_builtin_logical_pki_cert_template_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Net_IPMask) GetIPMask() []byte {
	if x != nil {
		return x.IPMask
	}
	return nil
}

type Url_URL struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scheme        string                 `protobuf:"bytes,1,opt,name=Scheme,proto3" json:"Scheme,omitempty"`
	Opaque        string                 `protobuf:"bytes,2,opt,name=Opaque,proto3" json:"Opaque,omitempty"`
	User          *Userinfo              `protobuf:"bytes,3,opt,name=User,proto3" json:"User,omitempty"`
	Host          string                 `protobuf:"bytes,4,opt,name=Host,proto3" json:"Host,omitempty"`
	Path          string                 `protobuf:"bytes,5,opt,name=Path,proto3" json:"Path,omitempty"`
	RawPath       string                 `protobuf:"bytes,6,opt,name=RawPath,proto3" json:"RawPath,omitempty"`
	OmitHost      bool                   `protobuf:"varint,7,opt,name=OmitHost,proto3" json:"OmitHost,omitempty"`
	ForceQuery    bool                   `protobuf:"varint,8,opt,name=ForceQuery,proto3" json:"ForceQuery,omitempty"`
	RawQuery      string                 `protobuf:"bytes,9,opt,name=RawQuery,proto3" json:"RawQuery,omitempty"`
	Fragment      string                 `protobuf:"bytes,10,opt,name=Fragment,proto3" json:"Fragment,omitempty"`
	RawFragment   string                 `protobuf:"bytes,11,opt,name=RawFragment,proto3" json:"RawFragment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Url_URL) Reset() {
	*x = Url_URL{}
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Url_URL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Url_URL) ProtoMessage() {}

func (x *Url_URL) ProtoReflect() protoreflect.Message {
	mi := &file_builtin_logical_pki_cert_template_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Url_URL.ProtoReflect.Descriptor instead.
func (*Url_URL) Descriptor() ([]byte, []int) {
	return file_builtin_logical_pki_cert_template_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Url_URL) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *Url_URL) GetOpaque() string {
	if x != nil {
		return x.Opaque
	}
	return ""
}

func (x *Url_URL) GetUser() *Userinfo {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Url_URL) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Url_URL) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Url_URL) GetRawPath() string {
	if x != nil {
		return x.RawPath
	}
	return ""
}

func (x *Url_URL) GetOmitHost() bool {
	if x != nil {
		return x.OmitHost
	}
	return false
}

func (x *Url_URL) GetForceQuery() bool {
	if x != nil {
		return x.ForceQuery
	}
	return false
}

func (x *Url_URL) GetRawQuery() string {
	if x != nil {
		return x.RawQuery
	}
	return ""
}

func (x *Url_URL) GetFragment() string {
	if x != nil {
		return x.Fragment
	}
	return ""
}

func (x *Url_URL) GetRawFragment() string {
	if x != nil {
		return x.RawFragment
	}
	return ""
}

var File_builtin_logical_pki_cert_template_proto protoreflect.FileDescriptor

const file_builtin_logical_pki_cert_template_proto_rawDesc = "" +
	"\n" +
	"'builtin/logical/pki/cert_template.proto\x12\vopenbao.pki\x1a\x1fgoogle/protobuf/timestamp.proto\"\x8a\x03\n" +
	"\x04PKIX\x1a\xb2\x02\n" +
	"\x04Name\x12\x18\n" +
	"\aCountry\x18\x01 \x03(\tR\aCountry\x12\"\n" +
	"\fOrganization\x18\x02 \x03(\tR\fOrganization\x12*\n" +
	"\x10OrganizationUnit\x18\x03 \x03(\tR\x10OrganizationUnit\x12\x1a\n" +
	"\bLocality\x18\x04 \x03(\tR\bLocality\x12\x1a\n" +
	"\bProvince\x18\x05 \x03(\tR\bProvince\x12$\n" +
	"\rStreetAddress\x18\x06 \x03(\tR\rStreetAddress\x12\x1e\n" +
	"\n" +
	"PostalCode\x18\a \x03(\tR\n" +
	"PostalCode\x12\"\n" +
	"\fSerialNumber\x18\b \x01(\tR\fSerialNumber\x12\x1e\n" +
	"\n" +
	"CommonName\x18\t \x01(\tR\n" +
	"CommonName\x1aM\n" +
	"\tExtension\x12\x0e\n" +
	"\x02Id\x18\x01 \x03(\x03R\x02Id\x12\x1a\n" +
	"\bCritical\x18\x02 \x01(\bR\bCritical\x12\x14\n" +
	"\x05Value\x18\x03 \x01(\fR\x05Value\"$\n" +
	"\x10ObjectIdentifier\x12\x10\n" +
	"\x03arc\x18\x01 \x03(\rR\x03arc\"\x98\x01\n" +
	"\x03net\x1a\x14\n" +
	"\x02IP\x12\x0e\n" +
	"\x02IP\x18\x01 \x01(\fR\x02IP\x1aY\n" +
	"\x05IPNet\x12#\n" +
	"\x02IP\x18\x01 \x01(\v2\x13.openbao.pki.net.IPR\x02IP\x12+\n" +
	"\x04Mask\x18\x02 \x01(\v2\x17.openbao.pki.net.IPMaskR\x04Mask\x1a \n" +
	"\x06IPMask\x12\x16\n" +
	"\x06IPMask\x18\x01 \x01(\fR\x06IPMask\"e\n" +
	"\bUserinfo\x12\x1a\n" +
	"\busername\x18\x01 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\x12!\n" +
	"\fpassword_set\x18\x03 \x01(\bR\vpasswordSet\"\xc0\x02\n" +
	"\x03url\x1a\xb8\x02\n" +
	"\x03URL\x12\x16\n" +
	"\x06Scheme\x18\x01 \x01(\tR\x06Scheme\x12\x16\n" +
	"\x06Opaque\x18\x02 \x01(\tR\x06Opaque\x12)\n" +
	"\x04User\x18\x03 \x01(\v2\x15.openbao.pki.UserinfoR\x04User\x12\x12\n" +
	"\x04Host\x18\x04 \x01(\tR\x04Host\x12\x12\n" +
	"\x04Path\x18\x05 \x01(\tR\x04Path\x12\x18\n" +
	"\aRawPath\x18\x06 \x01(\tR\aRawPath\x12\x1a\n" +
	"\bOmitHost\x18\a \x01(\bR\bOmitHost\x12\x1e\n" +
	"\n" +
	"ForceQuery\x18\b \x01(\bR\n" +
	"ForceQuery\x12\x1a\n" +
	"\bRawQuery\x18\t \x01(\tR\bRawQuery\x12\x1a\n" +
	"\bFragment\x18\n" +
	" \x01(\tR\bFragment\x12 \n" +
	"\vRawFragment\x18\v \x01(\tR\vRawFragment\"\x17\n" +
	"\x03OID\x12\x10\n" +
	"\x03arc\x18\x01 \x03(\x04R\x03arc\"\x95\x01\n" +
	"\rPolicyMapping\x12@\n" +
	"\x12IssuerDomainPolicy\x18\x01 \x01(\v2\x10.openbao.pki.OIDR\x12IssuerDomainPolicy\x12B\n" +
	"\x13SubjectDomainPolicy\x18\x02 \x01(\v2\x10.openbao.pki.OIDR\x13SubjectDomainPolicy\"\xe2\x02\n" +
	"\x10ValidationOutput\x125\n" +
	"\btemplate\x18\x01 \x01(\v2\x19.openbao.pki.CertTemplateR\btemplate\x12\x1d\n" +
	"\n" +
	"issuer_ref\x18\x02 \x01(\tR\tissuerRef\x12\x17\n" +
	"\ause_pss\x18\x03 \x01(\bR\x06usePss\x12%\n" +
	"\x0esignature_bits\x18\x04 \x01(\rR\rsignatureBits\x12%\n" +
	"\x0egenerate_lease\x18\x05 \x01(\bR\rgenerateLease\x12\x19\n" +
	"\bno_store\x18\x06 \x01(\bR\anoStore\x12\x1a\n" +
	"\bwarnings\x18\a \x03(\tR\bwarnings\x12$\n" +
	"\x0esubject_key_id\x18\b \x01(\fR\fsubjectKeyId\x12\x19\n" +
	"\bkey_type\x18\t \x01(\tR\akeyType\x12\x19\n" +
	"\bkey_bits\x18\n" +
	" \x01(\x04R\akeyBits\"\xb1\x0e\n" +
	"\fCertTemplate\x12\x18\n" +
	"\aVersion\x18\x01 \x01(\x03R\aVersion\x120\n" +
	"\aSubject\x18\x02 \x01(\v2\x16.openbao.pki.PKIX.NameR\aSubject\x128\n" +
	"\tNotBefore\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tNotBefore\x126\n" +
	"\bNotAfter\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\bNotAfter\x121\n" +
	"\bKeyUsage\x18\x05 \x01(\x0e2\x15.openbao.pki.KeyUsageR\bKeyUsage\x12E\n" +
	"\x0fExtraExtensions\x18\x06 \x03(\v2\x1b.openbao.pki.PKIX.ExtensionR\x0fExtraExtensions\x12:\n" +
	"\vExtKeyUsage\x18\a \x03(\x0e2\x18.openbao.pki.ExtKeyUsageR\vExtKeyUsage\x12M\n" +
	"\x12UnknownExtKeyUsage\x18\b \x03(\v2\x1d.openbao.pki.ObjectIdentifierR\x12UnknownExtKeyUsage\x124\n" +
	"\x15BasicConstraintsValid\x18\t \x01(\bR\x15BasicConstraintsValid\x12\x12\n" +
	"\x04IsCA\x18\n" +
	" \x01(\bR\x04IsCA\x12\x1e\n" +
	"\n" +
	"MaxPathLen\x18\v \x01(\x03R\n" +
	"MaxPathLen\x12&\n" +
	"\x0eMaxPathLenZero\x18\f \x01(\bR\x0eMaxPathLenZero\x12\"\n" +
	"\fSubjectKeyId\x18\r \x01(\fR\fSubjectKeyId\x12\x1a\n" +
	"\bDNSNames\x18\x0e \x03(\tR\bDNSNames\x12&\n" +
	"\x0eEmailAddresses\x18\x0f \x03(\tR\x0eEmailAddresses\x125\n" +
	"\vIPAddresses\x18\x10 \x03(\v2\x13.openbao.pki.net.IPR\vIPAddresses\x12(\n" +
	"\x04URIs\x18\x11 \x03(\v2\x14.openbao.pki.url.URLR\x04URIs\x12@\n" +
	"\x1bPermittedDNSDomainsCritical\x18\x12 \x01(\bR\x1bPermittedDNSDomainsCritical\x120\n" +
	"\x13PermittedDNSDomains\x18\x13 \x03(\tR\x13PermittedDNSDomains\x12.\n" +
	"\x12ExcludedDNSDomains\x18\x14 \x03(\tR\x12ExcludedDNSDomains\x12D\n" +
	"\x11PermittedIPRanges\x18\x15 \x03(\v2\x16.openbao.pki.net.IPNetR\x11PermittedIPRanges\x12B\n" +
	"\x10ExcludedIPRanges\x18\x16 \x03(\v2\x16.openbao.pki.net.IPNetR\x10ExcludedIPRanges\x128\n" +
	"\x17PermittedEmailAddresses\x18\x17 \x03(\tR\x17PermittedEmailAddresses\x126\n" +
	"\x16ExcludedEmailAddresses\x18\x18 \x03(\tR\x16ExcludedEmailAddresses\x120\n" +
	"\x13PermittedURIDomains\x18\x19 \x03(\tR\x13PermittedURIDomains\x12.\n" +
	"\x12ExcludedURIDomains\x18\x1a \x03(\tR\x12ExcludedURIDomains\x12K\n" +
	"\x11PolicyIdentifiers\x18\x1b \x03(\v2\x1d.openbao.pki.ObjectIdentifierR\x11PolicyIdentifiers\x12,\n" +
	"\bPolicies\x18\x1c \x03(\v2\x10.openbao.pki.OIDR\bPolicies\x12*\n" +
	"\x10InhibitAnyPolicy\x18\x1d \x01(\x03R\x10InhibitAnyPolicy\x122\n" +
	"\x14InhibitAnyPolicyZero\x18\x1e \x01(\bR\x14InhibitAnyPolicyZero\x122\n" +
	"\x14InhibitPolicyMapping\x18\x1f \x01(\x03R\x14InhibitPolicyMapping\x12:\n" +
	"\x18InhibitPolicyMappingZero\x18  \x01(\bR\x18InhibitPolicyMappingZero\x124\n" +
	"\x15RequireExplicitPolicy\x18! \x01(\x03R\x15RequireExplicitPolicy\x12<\n" +
	"\x19RequireExplicitPolicyZero\x18\" \x01(\bR\x19RequireExplicitPolicyZero\x12B\n" +
	"\x0ePolicyMappings\x18# \x03(\v2\x1a.openbao.pki.PolicyMappingR\x0ePolicyMappings*\x94\x02\n" +
	"\bKeyUsage\x12\x17\n" +
	"\x13KeyUsageUnspecified\x10\x00\x12\x1c\n" +
	"\x18KeyUsageDigitalSignature\x10\x01\x12\x1d\n" +
	"\x19KeyUsageContentCommitment\x10\x02\x12\x1b\n" +
	"\x17KeyUsageKeyEncipherment\x10\x03\x12\x1c\n" +
	"\x18KeyUsageDataEncipherment\x10\x04\x12\x18\n" +
	"\x14KeyUsageKeyAgreement\x10\x05\x12\x14\n" +
	"\x10KeyUsageCertSign\x10\x06\x12\x13\n" +
	"\x0fKeyUsageCRLSign\x10\a\x12\x18\n" +
	"\x14KeyUsageEncipherOnly\x10\b\x12\x18\n" +
	"\x14KeyUsageDecipherOnly\x10\t*\xd0\x03\n" +
	"\vExtKeyUsage\x12\x12\n" +
	"\x0eExtKeyUsageAny\x10\x00\x12\x19\n" +
	"\x15ExtKeyUsageServerAuth\x10\x01\x12\x19\n" +
	"\x15ExtKeyUsageClientAuth\x10\x02\x12\x1a\n" +
	"\x16ExtKeyUsageCodeSigning\x10\x03\x12\x1e\n" +
	"\x1aExtKeyUsageEmailProtection\x10\x04\x12\x1d\n" +
	"\x19ExtKeyUsageIPSECEndSystem\x10\x05\x12\x1a\n" +
	"\x16ExtKeyUsageIPSECTunnel\x10\x06\x12\x18\n" +
	"\x14ExtKeyUsageIPSECUser\x10\a\x12\x1b\n" +
	"\x17ExtKeyUsageTimeStamping\x10\b\x12\x1a\n" +
	"\x16ExtKeyUsageOCSPSigning\x10\t\x12)\n" +
	"%ExtKeyUsageMicrosoftServerGatedCrypto\x10\n" +
	"\x12(\n" +
	"$ExtKeyUsageNetscapeServerGatedCrypto\x10\v\x12-\n" +
	")ExtKeyUsageMicrosoftCommercialCodeSigning\x10\f\x12)\n" +
	"%ExtKeyUsageMicrosoftKernelCodeSigning\x10\rB0Z.github.com/openbao/openbao/builtin/logical/pkib\x06proto3"

var (
	file_builtin_logical_pki_cert_template_proto_rawDescOnce sync.Once
	file_builtin_logical_pki_cert_template_proto_rawDescData []byte
)

func file_builtin_logical_pki_cert_template_proto_rawDescGZIP() []byte {
	file_builtin_logical_pki_cert_template_proto_rawDescOnce.Do(func() {
		file_builtin_logical_pki_cert_template_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_builtin_logical_pki_cert_template_proto_rawDesc), len(file_builtin_logical_pki_cert_template_proto_rawDesc)))
	})
	return file_builtin_logical_pki_cert_template_proto_rawDescData
}

var file_builtin_logical_pki_cert_template_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_builtin_logical_pki_cert_template_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_builtin_logical_pki_cert_template_proto_goTypes = []any{
	(KeyUsage)(0),                 // 0: openbao.pki.KeyUsage
	(ExtKeyUsage)(0),              // 1: openbao.pki.ExtKeyUsage
	(*PKIX)(nil),                  // 2: openbao.pki.PKIX
	(*ObjectIdentifier)(nil),      // 3: openbao.pki.ObjectIdentifier
	(*Net)(nil),                   // 4: openbao.pki.net
	(*Userinfo)(nil),              // 5: openbao.pki.Userinfo
	(*Url)(nil),                   // 6: openbao.pki.url
	(*OID)(nil),                   // 7: openbao.pki.OID
	(*PolicyMapping)(nil),         // 8: openbao.pki.PolicyMapping
	(*ValidationOutput)(nil),      // 9: openbao.pki.ValidationOutput
	(*CertTemplate)(nil),          // 10: openbao.pki.CertTemplate
	(*PKIX_Name)(nil),             // 11: openbao.pki.PKIX.Name
	(*PKIX_Extension)(nil),        // 12: openbao.pki.PKIX.Extension
	(*Net_IP)(nil),                // 13: openbao.pki.net.IP
	(*Net_IPNet)(nil),             // 14: openbao.pki.net.IPNet
	(*Net_IPMask)(nil),            // 15: openbao.pki.net.IPMask
	(*Url_URL)(nil),               // 16: openbao.pki.url.URL
	(*timestamppb.Timestamp)(nil), // 17: google.protobuf.Timestamp
}
var file_builtin_logical_pki_cert_template_proto_depIdxs = []int32{
	7,  // 0: openbao.pki.PolicyMapping.IssuerDomainPolicy:type_name -> openbao.pki.OID
	7,  // 1: openbao.pki.PolicyMapping.SubjectDomainPolicy:type_name -> openbao.pki.OID
	10, // 2: openbao.pki.ValidationOutput.template:type_name -> openbao.pki.CertTemplate
	11, // 3: openbao.pki.CertTemplate.Subject:type_name -> openbao.pki.PKIX.Name
	17, // 4: openbao.pki.CertTemplate.NotBefore:type_name -> google.protobuf.Timestamp
	17, // 5: openbao.pki.CertTemplate.NotAfter:type_name -> google.protobuf.Timestamp
	0,  // 6: openbao.pki.CertTemplate.KeyUsage:type_name -> openbao.pki.KeyUsage
	12, // 7: openbao.pki.CertTemplate.ExtraExtensions:type_name -> openbao.pki.PKIX.Extension
	1,  // 8: openbao.pki.CertTemplate.ExtKeyUsage:type_name -> openbao.pki.ExtKeyUsage
	3,  // 9: openbao.pki.CertTemplate.UnknownExtKeyUsage:type_name -> openbao.pki.ObjectIdentifier
	13, // 10: openbao.pki.CertTemplate.IPAddresses:type_name -> openbao.pki.net.IP
	16, // 11: openbao.pki.CertTemplate.URIs:type_name -> openbao.pki.url.URL
	14, // 12: openbao.pki.CertTemplate.PermittedIPRanges:type_name -> openbao.pki.net.IPNet
	14, // 13: openbao.pki.CertTemplate.ExcludedIPRanges:type_name -> openbao.pki.net.IPNet
	3,  // 14: openbao.pki.CertTemplate.PolicyIdentifiers:type_name -> openbao.pki.ObjectIdentifier
	7,  // 15: openbao.pki.CertTemplate.Policies:type_name -> openbao.pki.OID
	8,  // 16: openbao.pki.CertTemplate.PolicyMappings:type_name -> openbao.pki.PolicyMapping
	13, // 17: openbao.pki.net.IPNet.IP:type_name -> openbao.pki.net.IP
	15, // 18: openbao.pki.net.IPNet.Mask:type_name -> openbao.pki.net.IPMask
	5,  // 19: openbao.pki.url.URL.User:type_name -> openbao.pki.Userinfo
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_builtin_logical_pki_cert_template_proto_init() }
func file_builtin_logical_pki_cert_template_proto_init() {
	if File_builtin_logical_pki_cert_template_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_builtin_logical_pki_cert_template_proto_rawDesc), len(file_builtin_logical_pki_cert_template_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_builtin_logical_pki_cert_template_proto_goTypes,
		DependencyIndexes: file_builtin_logical_pki_cert_template_proto_depIdxs,
		EnumInfos:         file_builtin_logical_pki_cert_template_proto_enumTypes,
		MessageInfos:      file_builtin_logical_pki_cert_template_proto_msgTypes,
	}.Build()
	File_builtin_logical_pki_cert_template_proto = out.File
	file_builtin_logical_pki_cert_template_proto_goTypes = nil
	file_builtin_logical_pki_cert_template_proto_depIdxs = nil
}
