name: Run linters

on:
  merge_group:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches:
      - main
      - release/**

concurrency:
  group: ${{ github.head_ref || github.run_id }}-lint
  cancel-in-progress: true

jobs:
  vulnerabilities:
    name: Vulnerable dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0
          persist-credentials: false
      - uses: ./.github/actions/set-up-go
      - name: Check dependencies for vulnerabilities
        run: make vulncheck

  codechecker:
    name: Code checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - uses: ./.github/actions/set-up-go
      - uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          version: v2.5
          only-new-issues: true
      - uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        if: always()
        with:
          version: v2.5
          only-new-issues: true
          working-directory: ./api
      - uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        if: always()
        with:
          version: v2.5
          only-new-issues: true
          working-directory: ./api/auth/approle
      - uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        if: always()
        with:
          version: v2.5
          only-new-issues: true
          working-directory: ./api/auth/kubernetes
      - uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        if: always()
        with:
          version: v2.5
          only-new-issues: true
          working-directory: ./api/auth/userpass
      - uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        if: always()
        with:
          version: v2.5
          only-new-issues: true
          working-directory: ./sdk

  semgrep:
    name: Semgrep
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep@sha256:ffc6f3567654f9431456d49fd059dfe548f007c494a7eb6cd5a1a3e50d813fb3
    # Skip any PR created by dependabot and any check triggered by merge group
    if: (github.actor != 'dependabot[bot]') && (github.event != 'merge_group')
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Run Semgrep Rules
        id: semgrep
        run: semgrep ci --include '*.go' --config 'tools/semgrep/ci'

  gomod:
    name: Go mod checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: ./.github/actions/set-up-go
      - name: Run go mod tidy to check for differences
        run: make ci-tidy-all
      - name: Run go.mod synchronization to check for differences
        run: make ci-sync-deps

  el8gobuild:
    # make sure that bao can still be built with the golang version on el8
    name: EL8 Go build checks
    runs-on: ubuntu-latest
    container: ghcr.io/almalinux/8-base
    steps:
      - name: Install required packages
        run: dnf -y install golang git
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Set safe.directory
        # This is supposed to be done by default in the checkout action
        # but it doesn't work within a container.
        # See https://github.com/actions/checkout/issues/2031
        run: git config --global --add safe.directory $(pwd)
      - name: Set the go version in go.mod
        run: |
          GO_VERSION="$(go version | awk '{print $3}' | sed 's/go//')"
          set -ex
          go mod edit -go=$GO_VERSION
          go mod tidy
      - name: go build bao
        run: go build -o bin/bao
      - name: Check that the binary runs
        run: ./bin/bao version

  protobuf:
    name: Protobuf checks
    runs-on: ubuntu-latest
    if: github.base_ref == 'main'
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: ./.github/actions/set-up-go
      - name: Install protobuf
        run: |
          mkdir -p ~/.protoc
          cd ~/.protoc
          wget https://github.com/google/protobuf/releases/download/v31.1/protoc-31.1-linux-x86_64.zip
          sha256sum -c <<< '96553041f1a91ea0efee963cb16f462f5985b4d65365f3907414c360044d8065  protoc-31.1-linux-x86_64.zip' || exit 1
          unzip protoc-31.1-linux-x86_64.zip
          sudo ln -s $PWD/bin/protoc /usr/local/bin
          protoc --version
      - name: Run protobuf and check for differences
        run: |
          git diff --quiet || exit 1
          make proto
          git diff --quiet || (echo -e "\n\nModified files:" && git status --short && echo -e "\n\nRun 'make proto' locally and commit the changes.\n" && exit 1)
