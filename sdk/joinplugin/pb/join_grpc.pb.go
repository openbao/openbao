// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: sdk/joinplugin/pb/join.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Join_Candidates_FullMethodName = "/join.Join/candidates"
	Join_Cleanup_FullMethodName    = "/join.Join/cleanup"
)

// JoinClient is the client API for Join service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JoinClient interface {
	Candidates(ctx context.Context, in *CandidateArgs, opts ...grpc.CallOption) (*Candidates, error)
	Cleanup(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type joinClient struct {
	cc grpc.ClientConnInterface
}

func NewJoinClient(cc grpc.ClientConnInterface) JoinClient {
	return &joinClient{cc}
}

func (c *joinClient) Candidates(ctx context.Context, in *CandidateArgs, opts ...grpc.CallOption) (*Candidates, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Candidates)
	err := c.cc.Invoke(ctx, Join_Candidates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joinClient) Cleanup(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Join_Cleanup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JoinServer is the server API for Join service.
// All implementations must embed UnimplementedJoinServer
// for forward compatibility.
type JoinServer interface {
	Candidates(context.Context, *CandidateArgs) (*Candidates, error)
	Cleanup(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedJoinServer()
}

// UnimplementedJoinServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJoinServer struct{}

func (UnimplementedJoinServer) Candidates(context.Context, *CandidateArgs) (*Candidates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Candidates not implemented")
}
func (UnimplementedJoinServer) Cleanup(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cleanup not implemented")
}
func (UnimplementedJoinServer) mustEmbedUnimplementedJoinServer() {}
func (UnimplementedJoinServer) testEmbeddedByValue()              {}

// UnsafeJoinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JoinServer will
// result in compilation errors.
type UnsafeJoinServer interface {
	mustEmbedUnimplementedJoinServer()
}

func RegisterJoinServer(s grpc.ServiceRegistrar, srv JoinServer) {
	// If the following call pancis, it indicates UnimplementedJoinServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Join_ServiceDesc, srv)
}

func _Join_Candidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CandidateArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoinServer).Candidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Join_Candidates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoinServer).Candidates(ctx, req.(*CandidateArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Join_Cleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoinServer).Cleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Join_Cleanup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoinServer).Cleanup(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Join_ServiceDesc is the grpc.ServiceDesc for Join service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Join_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "join.Join",
	HandlerType: (*JoinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "candidates",
			Handler:    _Join_Candidates_Handler,
		},
		{
			MethodName: "cleanup",
			Handler:    _Join_Cleanup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sdk/joinplugin/pb/join.proto",
}
