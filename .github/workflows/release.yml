# Creates a GitHub Release.
# Workflow is manually run.
# Preselect branch or tag before running this workflow.
name: release

on:
  workflow_dispatch:
    inputs:
      nightly:
        description: "Mark as nightly build"
        required: true
        default: true
        type: boolean
      dogorelease:
        description: "Run goreleaser"
        required: true
        default: true
        type: boolean
      dodistrelease:
        description: "Release distribution source tarball"
        required: true
        default: true
        type: boolean

permissions:
  contents: write
  id-token: write
  packages: write

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Disable release on nightly repository
        if: ${{ !inputs.nightly }}
        run: |
          if [ "$GITHUB_REPOSITORY" == "openbao/openbao-nightly" ]; then
            echo "Refusing to run non-nightly release on nightly repo" 1>&2
            exit 1
          fi
      - name: Disable nightly on primary repository
        if: inputs.nightly
        run: |
          if [ "$GITHUB_REPOSITORY" != "openbao/openbao-nightly" ]; then
            echo "Refusing to run nightly release on non-nightly repo" 1>&2
            exit 1
          fi

  build-ui-dist:
    runs-on: ubuntu-latest
    needs:
      - setup
    outputs:
      version: ${{ steps.make-distribution-tarball.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required by GoRelease

      - name: Configure nightly build
        if: inputs.nightly
        run: |
          # Locally remove previous nightly tags so they do not interfere
          # with nightly tag computation. Also add the upstream.
          git remote add upstream https://github.com/openbao/openbao
          git fetch --all

          for tag in $(git tag); do
            if [[ "$tag" == *nightly* ]]; then
              echo "Deleting $tag"
              git tag --delete "$tag"
            fi
          done

          # Then create a nightly tag for this commit. Because this uses the
          # time of commit, it is stable across different runners.
          nightly_tag="$(bash ./scripts/nightly_tag.sh)"
          git tag "$nightly_tag"

      - name: Node setup
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: "./ui/package.json"

      - name: Yarn setup
        id: install-yarn
        run: |
          npm install -g yarn

      - name: UI Cache Setup
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
            http/web_ui/
          key: ${{ github.ref }}-ui

      # Before executing binary builds, build the UI.
      - name: Install UI dependencies
        id: ui-dependencies
        working-directory: ./ui
        run: |
          yarn install --frozen-lockfile
          npm rebuild node-sass

      - name: Build UI
        id: ui-build
        run: |
          make static-dist

      - name: Golang Setup
        if: inputs.dogorelease
        uses: ./.github/actions/set-up-go

      - name: go-check
        if: inputs.dogorelease
        run: go version

      - name: Make LICENSE_DEPENDENCIES.md
        if: inputs.dodistrelease
        run: |
          go run github.com/google/go-licenses@v1.6.0 report ./... --ignore github.com/openbao/openbao --template LICENSE_DEPENDENCIES.tpl > LICENSE_DEPENDENCIES.md

      - name: go mod vendor
        if: inputs.dodistrelease
        run: |
          go mod vendor

      - name: Make distribution source tarball
        if: inputs.dodistrelease
        id: make-distribution-tarball
        run: |
          version="$(git describe --tags --exclude "api/*" --exclude "sdk/*" --abbrev=0 | sed 's/^v//')"
          echo "version=$version" | tee -a "$GITHUB_OUTPUT"
          tar --exclude .git --exclude '*.gz' --exclude '*/ui/.yarn/cache' --exclude node_modules -cJf ../openbao-dist-$version.tar.xz --xform="s,^\.,openbao-dist-$version," .
          mv ../*.xz .

      - name: Upload distribution source tarball artifact
        if: inputs.dodistrelease
        uses: actions/upload-artifact@v4
        with:
          name: dist-tarball
          path: '*.xz'
          retention-days: 1

  release-main:
    runs-on: ubuntu-latest
    needs:
      - build-ui-dist
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    strategy:
      matrix:
        release_os:
          - linux
          - hsm
          - darwin
          - freebsd
          - netbsd
          - openbsd
          - windows
    steps:
      - name: "Check free space on runner"
        if: inputs.dogorelease
        run: |
          df -h .

      - name: Checkout
        if: inputs.dogorelease
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required by GoRelease

      - name: Configure nightly build
        if: inputs.dogorelease && inputs.nightly
        run: |
          # Locally remove previous nightly tags so they do not interfere
          # with nightly tag computation. Also add the upstream.
          git remote add upstream https://github.com/openbao/openbao
          git fetch --all

          for tag in $(git tag); do
            if [[ "$tag" == *nightly* ]]; then
              echo "Deleting $tag"
              git tag --delete "$tag"
            fi
          done

          # Then create a nightly tag for this commit. Because this uses the
          # time of commit, it is stable across different runners.
          nightly_tag="$(bash ./scripts/nightly_tag.sh)"
          git tag "$nightly_tag"

      - name: Golang Setup
        if: inputs.dogorelease
        uses: ./.github/actions/set-up-go

      - name: go-check
        if: inputs.dogorelease
        run: go version

      - name: UI Cache Setup
        if: inputs.dogorelease
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
        with:
          path: |
            http/web_ui/
          key: ${{ github.ref }}-ui

      # Supports syft/sbom generation
      - uses: anchore/sbom-action/download-syft@v0
        if: inputs.dogorelease

        # Supports Buildx
      - name: Qemu Setup
        if: inputs.dogorelease
        uses: docker/setup-qemu-action@v3

      - name: Buildx Setup
        if: inputs.dogorelease
        uses: docker/setup-buildx-action@v3

      - name: Cosign Install
        if: inputs.dogorelease
        uses: sigstore/cosign-installer@v3

      - name: GPG Import
        if: inputs.dogorelease
        id: gpg-import
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSWORD }}

      - name: "Docker Login: ghcr.io"
        if: inputs.dogorelease && (startsWith(github.ref, 'refs/tags/') || inputs.nightly)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Docker Login: docker.io"
        if: inputs.dogorelease && (startsWith(github.ref, 'refs/tags/') || inputs.nightly)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: "Docker Login: quay.io"
        if: inputs.dogorelease && (startsWith(github.ref, 'refs/tags/') || inputs.nightly)
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

        # Needed for nPFM
      - name: Create GPG Signing Key File
        if: inputs.dogorelease && (startsWith(github.ref, 'refs/tags/') || inputs.nightly)
        run: |
          GPG_KEY_FILE=/tmp/signing-key.gpg
          echo "${{ secrets.GPG_PRIVATE_KEY_BASE64 }}" | base64 -di > "${GPG_KEY_FILE}"
          echo "GPG_KEY_FILE=${GPG_KEY_FILE}" >> "${GITHUB_ENV}"
        env:
          GPG_TTY: /dev/ttys000 # Set the GPG_TTY to avoid issues with pinentry

      - name: Install GoReleaser
        if: inputs.dogorelease && (startsWith(github.ref, 'refs/tags/') || inputs.nightly)
        uses: goreleaser/goreleaser-action@v6
        with:
          install-only: true
          # TODO: remove version pinning when Goreleaser 2.8 is released
          version: v2.5.1

      - name: Install C compiler for arm64 CGO cross-compilation
        if: inputs.dogorelease && matrix.release_os == 'hsm'
        run: sudo apt install -y gcc-aarch64-linux-gnu

      - name: "GoReleaser: Release"
        if: inputs.dogorelease && (startsWith(github.ref, 'refs/tags/') || inputs.nightly)
        run: |
          if [[ ! -f "goreleaser.${{ matrix.release_os }}.yaml" ]]; then
            yq e '.builds[0].goos |= ["${{ matrix.release_os }}"] | .checksum.name_template |= "checksums-${{ matrix.release_os }}.txt"' "goreleaser.other.yaml" | goreleaser release --clean --timeout=60m --verbose --parallelism 2 -f -
          else
            goreleaser release --clean --timeout=60m --verbose --parallelism 2 -f "goreleaser.${{ matrix.release_os }}.yaml"
          fi
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.gpg-import.outputs.fingerprint }}
          GPG_PASSWORD: ${{ secrets.GPG_PASSWORD }}
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          NFPM_DEFAULT_PASSPHRASE: ${{ secrets.GPG_PASSWORD }}
          NIGHTLY_RELEASE: ${{ inputs.nightly }}

      - name: Remove GPG Signing Key File
        if: always()
        run: |
          if [ -n "${GPG_KEY_FILE}" ]; then
            rm -rf "${GPG_KEY_FILE}"
          fi

  release-dist:
    runs-on: ubuntu-latest
    if: inputs.dodistrelease
    needs:
      - build-ui-dist
      - release-main
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TAGNAME: v${{ needs.build-ui-dist.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-tags: true

      - name: Create release if necessary
        if: ${{ !inputs.dogorelease }}
        run: |
          gh release create -t $TAGNAME --verify-tag $TAGNAME || true

      - name: Download dist-tarball artifact
        uses: actions/download-artifact@v5
        with:
          name: dist-tarball

      - name: Release distribution source tarball
        run: |
          gh release upload $TAGNAME *.xz
