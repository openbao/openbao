// Copyright (c) 2025 OpenBao a Series of LF Projects, LLC
// SPDX-License-Identifier: MPL-2.0

package kms

// WrappingAlgorithm represents key wrapping algorithms
type WrappingAlgorithm int

const (
	Wrap_AES_ECB WrappingAlgorithm = iota
	Wrap_AES_CBC
	Wrap_AES_CTR
	Wrap_PKCS1_OAEP
)

// WrappingParameters represents parameters for key wrapping/unwrapping operations.
type WrappingParameters struct {
	Algorithm WrappingAlgorithm
	// TODO: some algorithms may require specific parameters (padding, etc.). We should have specialized classes (structures) per algorithm.
}

// KeyDerivationParameters
type KeyDerivationParameters struct {
	DerivationData []byte
	// TODO
}

// KeyStore represents the keys life-cycle management interface that must be implemented by any crypto provider.
// This is the entry point for creating  Key objects.
type KeyStore interface {

	// Close terminates the keystore
	Close() error

	// Login logs in a user or application to this keystore
	Login(credentials *Credentials) error

	// ListKeys lists all keys managed by the current keystore
	// TODO: add list filters/criteria: symmetric keys, public keys, private keys, etc.
	ListKeys() ([]Key, error)

	// GetKeyById searches for the key with the specified Id
	// TODO: Id should be unique (UUId) throughout  a keystore ?
	GetKeyById(keyId string) (Key, error)

	// GetKeyByName searches for the key with the specified name
	GetKeyByName(keyName string) (Key, error)

	// GenerateSecretKey creates a new secret (symmetric) key based on the specified attributes.
	// The key value is randomly generated by the keystore.
	GenerateSecretKey(keyLen uint32, keyAttributes *KeyAttributes) (Key, error)

	// GenerateKeyPair creates a new key pair based on the specified attributes.
	// The private value elements are randomly generated by the keystore based on the provided public value elements.
	// TODO: generate pubKey Id/Name/GroupId based on the provided Id/Name ?
	GenerateKeyPair(keyPairAttributes *KeyAttributes) (privateKey Key, publicKey Key, err error)

	// ImportWrappedKey imports a symmetric or a private key into the current keystore. The key to import is wrapped (encrypted) with a key that is already present into the keystore.
	ImportWrappedKey(wrappingParams *WrappingParameters, unwrappingKey Key, wrappedKey []byte, keyAttributes *KeyAttributes) (Key, error)

	// ImportWrappedKeyByKId imports a symmetric or a private key into the current keystore. The key to import is wrapped (encrypted) with a key that is already present into the keystore (identified by its Id).
	ImportWrappedKeyByKId(wrappingParams *WrappingParameters, unwrappingKeyId string, wrappedKey []byte, keyAttributes *KeyAttributes) (Key, error)

	// ImportPlaintextKey imports into the current keystore a plain-text key.
	ImportPlaintextKey(keyValue []byte, keyAttributes *KeyAttributes) (Key, error)

	// ExportWrappedKey exports outside the keystore the value of a key, wrapped (encrypted) with another key from the same keystore.
	ExportWrappedKey(wrappingParams *WrappingParameters, wrappingKey Key, key Key) ([]byte, error)

	// DeriveKey derives a new key from a base key.
	DeriveKey(baseKey Key, derivationParams *KeyDerivationParameters, keyAttributes *KeyAttributes) (Key, error)

	// TODO !
	RolloverKey(key Key) error

	// RemoveKey removes a key from the underlying keystore. The key can no longer be used !
	RemoveKey(key Key) error
}

// KeyStoreFactory creates KeyStore instances
type KeyStoreFactory interface {
	// NewKeyStore creates a new KeyStore instance
	NewKeyStore(provider *CryptoProviderParameters) (KeyStore, error)
}
